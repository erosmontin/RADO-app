AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
# Description: >
#   RADO SAM s3

#   This SAM template describes the s3 


Parameters:
  CortexHost: 
    Type: String
    Description: cm cortex
    Default: 'cancelit-env-1.eba-pmamcuv5.us-east-1.elasticbeanstalk.com'
  JobsBucketPName:
    Type: String
    Description: jobs bucket
    Default: 'radoj'
  ResultsBucketPName:
    Type: String
    Description: results bucket
    Default: 'rador'
  DataBucketPName:
    Type: String
    Description: data bucket
    Default: 'radod'
  FailedBucketPName:
    Type: String
    Description: failed bucket
    Default: 'radof'

Globals:
  Function:
    Timeout: 60
    MemorySize: 512
    Architectures:
    - x86_64
    Environment:
      Variables:
        JobBucketName: !Ref JobsBucketPName
        DataBucketName: !Ref DataBucketPName
        ResultsBucketName: !Ref ResultsBucketPName
        FailedBucketName: !Ref FailedBucketPName
        Host: !Ref CortexHost
        CloudMRApiUrl: !Sub https://${CortexHost}/api
        PipelineScheduler: !Sub https://${CortexHost}/api/pipeline/request
        PipelineCompleted: !Sub https://${CortexHost}/api/pipeline/completed
        PipelineFailed: !Sub https://${CortexHost}/api/pipeline/failed
        deleteDataAPI: !Sub https://${CortexHost}/api/data/delete 
        updateDataAPI: !Sub https://${CortexHost}/api/data/update 


Resources:

  RADOAPI:
    Type: 'AWS::Serverless::Api'
    Properties:
      Tags:
        owner: "cloudmrhub" # kerberos/cloudmrhub
        mantainer: "montie01" #kerberos
        project: "mroptimum-v1" 
        team: "cloudmrhub"
        status: "dev" # dev/test/prod
        deletabale: "yes" # yes/maybe/check/no

      StageName: Prod
      CacheClusterEnabled: false
      Cors:
        AllowMethods: "'POST,GET,PUT,DELETE,OPTIONS'"
        AllowOrigin: "'*'"
        AllowHeaders: "'*'"

      Auth:
        AddDefaultAuthorizerToCorsPreflight: false
        DefaultAuthorizer: UserAuthorizer
        Authorizers:
          UserAuthorizer:
            FunctionArn: !GetAtt UserAuthorizerFunction.Arn
            Identity:
              ReauthorizeEvery: 0
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: true

  JobsBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      BucketName: !Ref JobsBucketPName
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
            - "*"
          AllowedMethods:
            - GET
            - PUT
            - HEAD
            - POST
            - DELETE
          AllowedOrigins:
            - "*"
  ResultsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref ResultsBucketPName
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
            - "*"
          AllowedMethods:
            - GET
            - PUT
            - HEAD
            - POST
            - DELETE
          AllowedOrigins:
            - "*"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      OwnershipControls:
        Rules:
        - ObjectOwnership: BucketOwnerPreferred
      # Delete unzipped results objects after 7 days to save on storage costs.
      LifecycleConfiguration:
        Rules:
          - Id: DeleteUnzippedObjects
            Status: Enabled
            ExpirationInDays: 7
            Prefix: unzipped/

#   # This is the function that authorizes users
  DataBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref DataBucketPName
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
            - "*"
          AllowedMethods:
            - GET
            - PUT
            - HEAD
            - POST
            - DELETE
          AllowedOrigins:
            - "*"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      OwnershipControls:
        Rules:
        - ObjectOwnership: BucketOwnerPreferred
  
  FailedBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      BucketName: !Ref FailedBucketPName
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
            - "*"
          AllowedMethods:
            - GET
            - PUT
            - HEAD
            - POST
            - DELETE
          AllowedOrigins:
            - "*"

Outputs:

