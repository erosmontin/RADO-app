AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
# Description: >
#   RADO SAM App

#   This SAM template describes the entire MROptimum AWS Architecture


Parameters:
  CortexHost: 
    Type: String
    Description: cm cortex
    Default: 'cancelit-env-1.eba-pmamcuv5.us-east-1.elasticbeanstalk.com'
  JobsBucketPName:
    Type: String
    Description: jobs bucket
    Default: 'radoj'
  ResultsBucketPName:
    Type: String
    Description: results bucket
    Default: 'rador'
  DataBucketPName:
    Type: String
    Description: data bucket
    Default: 'radod'
  FailedBucketPName:
    Type: String
    Description: failed bucket
    Default: 'radof'

Globals:
  Function:
    Timeout: 60
    MemorySize: 512
    Architectures:
    - x86_64
    Environment:
      Variables:
        JobBucketName: !Ref JobsBucketPName
        DataBucketName: !Ref DataBucketPName
        ResultsBucketName: !Ref ResultsBucketPName
        FailedBucketName: !Ref FailedBucketPName
        Host: !Ref CortexHost
        CloudMRApiUrl: !Sub https://${CortexHost}/api
        PipelineScheduler: !Sub https://${CortexHost}/api/pipeline/request
        PipelineCompleted: !Sub https://${CortexHost}/api/pipeline/completed
        PipelineFailed: !Sub https://${CortexHost}/api/pipeline/failed
        deleteDataAPI: !Sub https://${CortexHost}/api/data/delete 
        updateDataAPI: !Sub https://${CortexHost}/api/data/update 


Resources:

  RADOAPI:
    Type: 'AWS::Serverless::Api'
    Properties:
      Tags:
        owner: "cloudmrhub" # kerberos/cloudmrhub
        mantainer: "montie01" #kerberos
        project: "mroptimum-v1" 
        team: "cloudmrhub"
        status: "dev" # dev/test/prod
        deletabale: "yes" # yes/maybe/check/no

      StageName: Prod
      CacheClusterEnabled: false
      Cors:
        AllowMethods: "'POST,GET,PUT,DELETE,OPTIONS'"
        AllowOrigin: "'*'"
        AllowHeaders: "'*'"

      Auth:
        AddDefaultAuthorizerToCorsPreflight: false
        DefaultAuthorizer: UserAuthorizer
        Authorizers:
          UserAuthorizer:
            FunctionArn: !GetAtt UserAuthorizerFunction.Arn
            Identity:
              ReauthorizeEvery: 0
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: true

  JobsBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      BucketName: !Ref JobsBucketPName
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
            - "*"
          AllowedMethods:
            - GET
            - PUT
            - HEAD
            - POST
            - DELETE
          AllowedOrigins:
            - "*"
  ResultsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref ResultsBucketPName
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
            - "*"
          AllowedMethods:
            - GET
            - PUT
            - HEAD
            - POST
            - DELETE
          AllowedOrigins:
            - "*"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      OwnershipControls:
        Rules:
        - ObjectOwnership: BucketOwnerPreferred
      # Delete unzipped results objects after 7 days to save on storage costs.
      LifecycleConfiguration:
        Rules:
          - Id: DeleteUnzippedObjects
            Status: Enabled
            ExpirationInDays: 7
            Prefix: unzipped/

#   # This is the function that authorizes users
  DataBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref DataBucketPName
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
            - "*"
          AllowedMethods:
            - GET
            - PUT
            - HEAD
            - POST
            - DELETE
          AllowedOrigins:
            - "*"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      OwnershipControls:
        Rules:
        - ObjectOwnership: BucketOwnerPreferred
  
  FailedBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      BucketName: !Ref FailedBucketPName
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
            - "*"
          AllowedMethods:
            - GET
            - PUT
            - HEAD
            - POST
            - DELETE
          AllowedOrigins:
            - "*"

  UserAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Tags:
        owner: "montie01"
        mantainer: "montie01"
        project: "mroptimum"
        version: "v1"
        team: "cloudmrhub"
      PackageType: Zip
      CodeUri: user-authorizer-python/  # Change this to point to your Python code directory
      Handler: authorizer.lambda_handler  # Assuming your python file is named 'your_python_filename.py'
      Runtime: python3.8  # Adjust based on your desired Python runtime version

      Layers:
        - arn:aws:lambda:us-east-1:469266894233:layer:Requests_Layer:1

#   # This is the function which queues (or schedules) jobs on the pipeline.
#   #
#   # It is triggered by POST /pipeline request and will write the job to the
#   # cloudmrhub-jobs bucket.
#   # The request is authorized using the Authorization header which expects
#   # a Bearer JWT token. This should get validated with the user db.

  QueueJobFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: >
        This function creates an object defining the job configuration (<pipeline-id>.json) 
        in the jobs bucket. It is triggered by POST /pipeline.
        
      Tags:
        owner: "montie01"
        mantainer: "montie01"
        project: "mroptimum"
        version: "v1"
        team: "cloudmrhub"
      PackageType: Zip
      CodeUri: queue-job-python/
      Handler: app.lambda_handler
      Runtime: python3.8
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref JobsBucket
      Events:
        PostJobApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RADOAPI
            Path: /pipeline
            Method: post
            Auth:
              Authorizer: UserAuthorizer
      Layers:
        - arn:aws:lambda:us-east-1:469266894233:layer:Requests_Layer:1

  RunJobFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: >
        This function runs the Mroptium computation (it is the muscle worker).
        It should be triggered when an object is created in the jobs bucket.
      PackageType: Image
      Timeout: 900
      MemorySize: 10240
      ReservedConcurrentExecutions: 1
      EphemeralStorage:
        Size: 10240
      Tags:
        owner: "montie01"
        mantainer: "montie01"
        project: "mroptimum"
        version: "v1"
        team: "cloudmrhub"
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref JobsBucketPName
        - S3FullAccessPolicy:
            BucketName: !Ref DataBucketPName
        - S3FullAccessPolicy:
            BucketName: !Ref ResultsBucketPName
        - S3FullAccessPolicy:
            BucketName: mytestcmr
        - S3FullAccessPolicy:
            BucketName: !Ref FailedBucketPName

      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref JobsBucket
            Events: s3:ObjectCreated:*
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: run-job-python/
      DockerTag: python3.10-v1


  UpdateJobFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: >
        This function update Cloudmrhub after Mroptium computation.
        It should be triggered when an object is created in the results bucket.
      PackageType: Zip
      CodeUri: update-job-python/
      Handler: app.lambda_handler
      Runtime: python3.8
      Policies:
      - S3FullAccessPolicy:
            BucketName: !Ref ResultsBucketPName
      - S3FullAccessPolicy:
            BucketName: !Ref FailedBucketPName
      Events:
        S3ResultsEvent:
          Type: S3
          Properties:
            Bucket: !Ref ResultsBucket
            Events: s3:ObjectCreated:*
        S3ResultsEventFailed:
          Type: S3
          Properties:
            Bucket: !Ref FailedBucket
            Events: s3:ObjectCreated:*

      Layers:
        - arn:aws:lambda:us-east-1:469266894233:layer:Requests_Layer:1

  GetNIIFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: >
        This function takes a result file from s3 (specified with Bucket and Key), unzips
        it and returns its data through presigned url links
      PackageType: Zip
      CodeUri: getNii/
      Handler: app.lambda_handler
      Runtime: python3.8
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref ResultsBucketPName
      Events:
        GetNIIAPI:
          Type: Api
          Properties:
            Path: /unzip
            Method: post
            RestApiId: !Ref RADOAPI
            Auth:
              Authorizer: UserAuthorizer
      Layers:
        - arn:aws:lambda:us-east-1:469266894233:layer:Requests_Layer:1

  DataReadFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: data-access-python/
      Handler: data.read_data
      Runtime: python3.8
      Events:
        DataReadApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RADOAPI
            Method: get
            Path: /readdata
            Auth:
              Authorizer: UserAuthorizer

      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref DataBucketPName
        # This permission allows the Lambda function to request signed URLs
        # for objects that will be publicly readable. Uncomment if you want this ACL.

      Layers:
        - arn:aws:lambda:us-east-1:469266894233:layer:Requests_Layer:1

  UploadRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: getSignedURL/
      Handler: app.handler
      Runtime: nodejs16.x
      Environment:
        Variables:
          UploadBucket: !Ref DataBucketPName
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref DataBucketPName
        # This permission allows the Lambda function to request signed URLs
        # for objects that will be publicly readable. Uncomment if you want this ACL.
      Layers:
        - !Ref UploadRequestFunctionLayer
      Events:
        UploadAssetAPI:
          Type: Api
          Properties:
            Path: /uploads
            Method: post
            RestApiId: !Ref RADOAPI
            Auth:
              Authorizer: UserAuthorizer

  DownloadRequestFunction:
    # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: downloadRequestFunction/
      Handler: app.handler
      Runtime: nodejs16.x
      Timeout: 30
      MemorySize: 128
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref ResultsBucketPName
      Layers:
          - !Ref UploadRequestFunctionLayer
      Events:
        DownloadAssetAPI:
          Type: Api
          Properties:
            Path: /downloads
            Method: get
            RestApiId: !Ref RADOAPI
            Auth:
              Authorizer: UserAuthorizer

  DeleteFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: data-access-python/
      Handler: data.deleteData
      Runtime: python3.8
      Events:
        DataReadApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RADOAPI
            Method: get
            Path: /deletedata
            Auth:
              Authorizer: UserAuthorizer

      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref DataBucketPName

      Layers:
        - arn:aws:lambda:us-east-1:469266894233:layer:Requests_Layer:1

  UpdateFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: data-access-python/
      Handler: data.updateData
      Runtime: python3.8
      Events:
        DataReadApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RADOAPI
            Method: post
            Path: /updatedata
            Auth:
              Authorizer: UserAuthorizer

      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref DataBucketPName

      Layers:
        - arn:aws:lambda:us-east-1:469266894233:layer:Requests_Layer:1


  UploadRequestFunctionLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: upload-node-layer
      ContentUri: getSignedURL/
      CompatibleRuntimes:
        - nodejs16.x
    Metadata:
      BuildMethod: nodejs16.x

#  AmplifyApp:
#     Type: AWS::Amplify::App
#     Properties:
#       Name: AmplifyApp
#       Description: Amplify deployment for a React frontend on Git.
#       Repository: https://github.com/cloudmrhub-com/MROptimum-frontend.git
#       Environment:
#        Variables:
#           SIGNIN : 'https://cancelit-env.eba-pmamcuv5.us-east-1.elasticbeanstalk.com/api/auth/login'
#           SIGNOUT: 'https://cancelit-env.eba-pmamcuv5.us-east-1.elasticbeanstalk.com/api/auth/logout'
#           DATAAPI: !Ref ReadDataJobApi
#           DATAUPLODAAPI : !Ref UploadAPIendpointNode
#            DATA_RENAME_API : ''
#            DATA_DELETE_API :  ''
#            JOBS_API : !Ref QueueJobApi
#            JOBS_RETRIEVE_API : !Ref DownloadAPIendpointNode
#            JOBS_RENAME_API : ''
#            JOBS_DELETE_API :  ''
#            HOST : 'cancelit-env.eba-pmamcuv5.us-east-1.elasticbeanstalk.com'
#
#       AutoDeploy:
#         Enabled: True
  UploadInitiateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: uploadInit/
      Handler: app.handler
      Runtime: nodejs16.x
      Environment:
        Variables:
          UploadBucket: !Ref DataBucketPName
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref DataBucketPName
        # This permission allows the Lambda function to request signed URLs
        # for objects that will be publicly readable. Uncomment if you want this ACL.
      Layers:
        - !Ref UploadRequestFunctionLayer
      Events:
        UploadAssetAPI:
          Type: Api
          Properties:
            Path: /uploadinitiate
            Method: post
            RestApiId: !Ref RADOAPI
            Auth:
              Authorizer: UserAuthorizer

  UploadFinalizeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: uploadFinalize/
      Handler: app.handler
      Runtime: nodejs16.x
      Environment:
        Variables:
          UploadBucket: !Ref DataBucketPName
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref DataBucketPName
        # This permission allows the Lambda function to request signed URLs
        # for objects that will be publicly readable. Uncomment if you want this ACL.
      Layers:
        - !Ref UploadRequestFunctionLayer
      Events:
        UploadAssetAPI:
          Type: Api
          Properties:
            Path: /uploadfinalize
            Method: post
            RestApiId: !Ref RADOAPI
            Auth:
              Authorizer: UserAuthorizer


Outputs:
  QueueJobApi:
    Description: API Gateway endpoint URL for Prod stage for Queue function
    Value: !Sub "https://${RADOAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/pipeline/"
  ReadDataApi:
    Description: API Gateway endpoint URL for Prod stage for ReadData function
    Value: !Sub "https://${RADOAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/readdata/"
  UploadData:
    Description: "HTTP API endpoint URL to upload data"
    Value: !Sub "https://${RADOAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/uploads"
  DownloadData:
    Description: "HTTP API endpoint URL to download data"
    Value: !Sub "https://${RADOAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/downloads"
  UnzipResult:
    Description: "HTTP API endpoint files for Nii direct access"
    Value: !Sub "https://${RADOAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/unzip"
  DeleteData:
    Description: "HTTP API endpoint files to delete file"
    Value: !Sub "https://${RADOAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/deletedata"
  UpdateData:
    Description: "HTTP API endpoint files for update filename in database"
    Value: !Sub "https://${RADOAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/updatedata"
  UploadDataInitiate:
    Description: "HTTP API endpoint files to delete file"
    Value: !Sub "https://${RADOAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/uploadinitiate"
  UploadDataFinalize:
    Description: "HTTP API endpoint files for update filename in database"
    Value: !Sub "https://${RADOAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/uploadfinalize"
